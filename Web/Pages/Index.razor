@page "/"

@using DAL;

<PageTitle>Index</PageTitle>


@if (breeds is null)
{
    <h3>Loading...</h3>
}
else
{


    @if (!imageShown)
    {
        <div class="d-flex flex-row justify-items-evenly">
            <label for="breed" class="form-control-label">Select breed you want to sketch today:</label>
            <InputSelect @bind-Value="selectedBreed" id="breed" class="form-select">
                <option value="Any" selected>Any</option>
                @foreach (string breed in breeds)
                {
                    <option value="@breed">@breed</option>
                }
            </InputSelect>
            <label for="interval" class="form-control-label">Select interval (seconds):</label>
            <InputNumber @bind-Value="selectedInterval" min="5" id="interval" class="form-control"></InputNumber>
        </div>
        @if (selectedInterval < 5)
        {

            <button class="btn btn-success w-100 mt-2" @onclick="LoadImages" disabled>Start</button>
        }
        else
        {
            <button class="btn btn-success w-100 mt-2" @onclick="LoadImages">Start</button>
        }
    }
    else
    {
        <button class="btn btn-danger w-100 mb-2" @onclick="stopTimer">Stop</button>
        <span class="h4 w-100 mb-4">@seconds</span>
    }


    
    @if (imageShown)
    {
        <div class="w-100 d-flex justify-content-center">
            <img class="img-fluid" height="540" src="@currentImage" />
	    </div>
    }
}



@code {

    private bool imageShown = false;
    private string selectedBreed = "Any";
    private int selectedInterval;
    private List<string> breeds = null;
    private List<string> images = null;
    private string currentImage;
    private CancellationTokenSource _tokenSource;
    private int seconds = 0;

    [Inject]
    private IApiFetcher _apiFetcher { get; set; }

    protected override async Task OnInitializedAsync()
    {
        breeds = await _apiFetcher.FetchBreeds();
    }

    protected async Task LoadImages() {
        images = selectedBreed == "Any" ?
            await _apiFetcher.FetchRandomImages() :
            await _apiFetcher.FetchImagesByBreed(selectedBreed);
        var rnd = new Random();
        images = images.OrderBy(item => rnd.Next()).ToList();
        imageShown = true;
        _tokenSource = new CancellationTokenSource();
        StartTimer(_tokenSource.Token);
    }

    protected async void StartTimer(CancellationToken cancellationToken) {
        foreach(var image in images) {
            currentImage = image;
            await countClock(cancellationToken);
            if (cancellationToken.IsCancellationRequested) return;
        }
        stopTimer();
    }

    protected async Task countClock(CancellationToken cancellationToken) {
        while (seconds < selectedInterval)
        {
            seconds++;
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
            await Task.Delay(1000);
            if (cancellationToken.IsCancellationRequested)
            {
                seconds = 0;
                return;
            }

        }
        seconds = 0;
    }

    private void stopTimer()
    {
        _tokenSource.Cancel();
        imageShown = false;
        InvokeAsync(() =>
        {
            StateHasChanged();
        });

    }
    }